#!/bin/bash

function usage() {
    echo $0 "< commands > < components >"
    echo $0 "[ show | install | remove | backup | restore ] [ cloud | base ]"
    echo "Commands:"
    echo "         show"
    echo "         install"
    echo "         remove"
    echo "         backup"
    echo "         restore"
    echo "Components:"
    echo "         cloud"
    echo "         base"
}

function show() {
  echo "show" $1

  case $1 in
    "nvim")
      if [ -d ~/.config/nvim ]; then
        ls -l ~/.config/nvim/
      else
        echo "~/.config/nvim" "not found"
      fi
      ;;
    "tmux")
        if [ -d ~/.config/tmux ]; then
            ls -l ~/.config/tmux/
        else
            echo "~/.config/tmux" "not found"
        fi
        ;;
    "kitty")
        if [ -d ~/.config/kitty ]; then
            ls -l ~/.config/kitty/
        else
            echo "~/.config/kitty" "not found"
        fi
        ;;
    "xenv")
        if [ -d ~/.config/xenv ]; then
            ls -l ~/.config/xenv/
        else
            echo "~/.config/xenv" "not found"
        fi
        ;;
    *)
        echo "Checking ~/.config"
        ls -ld ~/.config/nvim/
        ls -ld ~/.config/tmux/
        ls -ld ~/.config/kitty/
        if [ -d ~/.config/xenv/ ]; then
          ls -ld ~/.config/xenv/
        else
          echo "~/.config/xenv" "not found"
        fi
  esac
}


function install_base() {
    echo "base" $1
    if [ ! -d ~/.config ]; then
        mkdir -p ~/.config
    else
        cp -R ./config/* ~/.config
    fi

    if [ -f ~/.bash_profile ]; then 
        cat ./env/bash_profile >> ~/.bash_profile
    else
	cp ./env/bash_profile ~/.bash_profile
    fi
}
function remove_base() {
    echo "remove_base" $1
    if [ -d ~/.config/xenv ]; then
        rm -rf ~/.config/xenv
    fi
    if [ -d ~/.config/nvim ]; then
        rm -rf ~/.config/nvim
    fi
    if [ -d ~/.config/tmux ]; then
        rm -rf ~/.config/tmux
    fi
    if [ -d ~/.config/kitty ]; then
        rm -rf ~/.config/kitty
    fi
}

# TODO:
# Some of the packages needed had to be installed differently. 
# e.g. neovim direct download versions are much much better that 
# the one in apt install. 
# go lang had to be installed directly. Same with rust 

function install_pkg() {
  echo "install_pkg" $1
  PKGLIST="git tmux neovim fish curl kitty pkgconfig"
  OS=`uname -s`
  if [ $OS ==  "Darwin" ]; then
    for p in ${PKGLIST}
    do
      brew install $p
    done
  fi
  if [ $OS == "Linux" ]; then
    for p in ${PKGLIST}
    do
      sudo apt install $p -y
    done
  fi
}

function remove_pkg() {
    echo "remove_pkg" $1
    PKGLIST="git tmux neovim fish curl pkgconfig"
    OS=`uname -s`
    if [ $OS ==  "Darwin" ]; then
        for p in ${PKGLIST}
        do
            brew uninstall $p
        done
    fi
    if [ $OS == "Linux" ]; then
        for p in ${PKGLIST}
        do
            sudo apt remove $p -y
        done
    fi

}


function install_ohmyfish() {
  echo "Installing ohmyfish"
  curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish

}

function install_cloud() {
    echo "cloud" $1 $2
    if [ ! -d ~/.aws ]; then
        cp -R cloud/aws ~/.aws/
    fi
    if [ ! -d ~/.azure ]; then
        cp -R cloud/azure ~/.azure/
    fi
}

function remove_cloud() {
    echo "remove_cloud" $1 
    if [ -d ~/.aws ]; then
        rm -rf ~/.aws
    fi
    if [ -d ~/.azure ]; then
        rm -rf ~/.azure
    fi
    if [ -d ~/.config/gcloud ]; then
        rm -rf ~/.config/gcloud
    fi
}

function install() {
    echo "install" $1 $2

    case $1 in
        "cloud")
            shift
            install_cloud $2
            exit 0
            ;;
        "base")
            shift
            install_base $2
            exit 0
            ;;
        "pkg")
            shift
            install_pkg $2
            exit 0
            ;;
        -h | --help)
            echo "install [ cloud | base | pkg ]"
            exit 0
	        ;;
        *)
            echo "Unknown: " $1
            exit 1
    esac
}

function remove() {
    echo "remove" $1 $2

    case $1 in
        "base")
            shift
            remove_base $2
            exit 0
            ;;
        "cloud")
            shift 
            remove_cloud $2
            exit 0
            ;;
        "pkg")
            shift
            remove_pkg $2
            exit 0
            ;;
        -h | --help)
            echo "remove [ cloud | base ]"
            exit 0
	    ;;
        *)
            echo "Unknown: " $1
            exit 1
    esac

}

function backup() {
    echo "backup" $1 $2
    if [ ! -d ~/.xbackup ]; then
        mkdir -p ~/.xbackup
    fi
    if [ -d ~/.config ]; then
    	cp -R ~/.config ~/.xbackup/
    fi
    if [ -d ~/.aws ]; then
    	cp -R ~/.aws ~/.xbackup/
    fi
    if [ -d ~/.azure ]; then
    	cp -R ~/.azure ~/.azure/
    fi
}

function restore() {
    echo "restore" $1 $2
    if [ ! -d ~/.xbackup ]; then
        echo "Please create a backup first "
    fi
    cp -R ~/.xbackup/.config ~/.config
    cp -R ~/.xbackup/.aws ~/.aws/
    cp -R ~/.xbackup/.azure ~/.azure/

}

UTIL=$(basename $0)

if [ $# -eq 0 ]; then
	usage
	exit 0
fi

case $1 in
    "show")
        shift
        show "$@"
        exit 0
        ;;
    "install")
        shift
        install "$@"
        exit 0
        ;;
    "remove")
        shift
        remove "$@"
        exit 0
        ;;
    "backup")
	shift
	backup "$@"
	exit 0
	;;
    "restore")
	shift
	restore "$@"
	exit 0
	;;
    -h | --help)
        usage
esac
